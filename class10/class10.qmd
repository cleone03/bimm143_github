---
title: "Class 10 | Structural Bioinformatics Part 1"
author: "Christopher Leone | A16731724"
format: html
toc: true
title_block_banner: true
---

## Introduction to the RCSB Protein Data Bank (PDB)

The main repository of biomolecular structure data is called the [Protein Data Bank](https://www.rcsb.org/) (PDB). It is the second oldest database in all of bioinformatics, after GenBank. 

What is currently in the PDB? We can access current composition stats [here](https://www.rcsb.org/stats/summary)

> (Q1) What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

```{r}
# First, let's read the .csv file into our R project. 
p <- read.csv("class10data.csv", row.names = 1)
head(p)
```

Let's create a new `function()` to make the process of changing data from characters to integers easier.

```{r}
# Next, we have to change the data from <chr> to <int>:
pdbInt <- function(x){
  y <- gsub(",", "", x)
  return(sum(as.numeric(y)))
}

# Let's use our new function to do make our sums:
xray.sum <- pdbInt(p$X.ray)
em.sum <- pdbInt(p$EM)
total.sum <- pdbInt(p$Total)

# And finally, our calculation:
((xray.sum + em.sum)/total.sum)*100
```

Through all of this work, we find that X-ray and Electron Microscopy account for **93.67%** of structures in the PDB.

> (Q2) What proportion of structures in the PDB are protein?

```{r}
protein <- pdbInt(p["Protein (only)", "Total"])
totals <- pdbInt(p$Total)
(protein/totals)*100
```

This tells us that proteins make up 86.2% of all structures in the PDB.

> (Q3) Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

**SKIPPED QUESTION**

## Visualizing the HIV-1 protease structure

Let's explore the HIV-1 protease structure with the PDB code `1HSG`. We will use the [Mol-star viewer](https://molstar.org/).

![Figure 1. The HIV-1 Protease](1HSG.png)

And here, we will use a spacefill representation around the ligand to show the cavity where the **MK1** ligand binds.

![Figure 2. The MK1 Binding Site](1HSGligand.png)

Within this cavity, we have the most expensive water molecule in the world! We can see it here:

![Figure 3. Water acts as H-bond donor between HIV-1 and MK1.](1HSGwater.png)

Shown in spacefill representation are the crucial ASP25 residues found in both chains:

![Figure 4: HIV-1 D25 Residues](space.png)

## Introduction to Bio3D in R

The `bio3d` package is focused on structural bioinformatics analysis and allows us to read and analyze PDB data.

```{r}
library(bio3d)

# Let's read in some structure data:
hsg <- read.pdb("1HSG")
hsg
```

Let's take a look at the `hsg` attributes:

```{r}
attributes(hsg)
```

From this, we see that we can see atom data with `hsg$atom`:

```{r}
head(hsg$atom)
```

And we can use `pdbseq()` to get the protein sequence:

```{r}
head(pdbseq(hsg))
```

Now, I want to visualize the protein within my Quarto document, so we will make use of some packages.

```{r}
# Let's load two external packages...
library(bio3dview)
library(NGLVieweR)

# Then we can use `view.pdb()` to view the protein.
view.pdb(hsg) |>
  setSpin()
```

Let's make it even more visually usefulâ€”let's highlight the catalytically active D25 residue.

```{r}
# Select the important ASP 25 residue
sele <- atom.select(hsg, resno=25)

# and highlight them in spacefill representation
view.pdb(hsg, cols=c("navy","teal"), 
         highlight = sele,
         highlight.style = "spacefill") |>
  setRock()
```

### Predicting functional motions of a single structure

We can finish today with a bioinformatics prediction of the functional motions of a protein. We will do this by using a Normal Mode Analysis (NMA).

```{r}
adk <- read.pdb("6s36")

# Let's run the NMA:
m <- nma(adk)
plot(m)
```

The NMA plots hint that the greatest activity occurs between approximate residues 125-165. Let's take a look with some other views.

```{r}
view.nma(m)
```

We can also generate a trajectory movie of the predicted dynamics and view this in Mol-star.

```{r}
# The mktrj() function allows for these animations.
mktrj(m, file="nma.pdb")
```



