---
title: "Class 14: RNASeq Mini-Project"
author: "Christopher Leone | A16731724"
format: html
toc: true
---

## Loading Files and Packages

Here we will perform a complete RNASeq analysis from counts to pathways and biological interpretation.

First, we have to load our packages and read the data into our project:

```{r, message=FALSE}
# Loading packages:
library(DESeq2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(pathview)
library(gage)
library(gageData)
```

```{r}
# Import metadata:
colData <- read.csv("GSE37704_metadata.csv", row.names=1)
head(colData)

# Import countdata:
countData <- read.csv("GSE37704_featurecounts.csv", row.names=1)
head(countData)
```

## Tidying the Data

Let's check the correspondance of colData rows and countData columns.

```{r}
rownames(colData) == colnames(countData)
colnames(countData)
```

We see that we have an unwanted "length" column in `countData`, so let's remove it:

```{r}
counts <- countData[,2:7]

# Double check that they match:
all(rownames(colData) == colnames(counts))
```

## Remove Zero Count Genes

We will have rows in `counts` for genes that are insignificant to us due to having no expression. So, let's clear those genes:

```{r}
# If the rowSums() of a gene is 0, let's remove that gene:
to.keep <- rowSums(counts) != 0
cleanCounts <- counts[to.keep,]
```

> How many genes do we have left after cleaning?

```{r}
nrow(cleanCounts)
```

There are 15975 genes remaining after clearing the empty entries.

## Setup for DESeq Analysis

```{r}
# We have to use the very long function here
dds <- DESeqDataSetFromMatrix(countData=cleanCounts,
                              colData=colData,
                              design=~condition)
```

## Running DESeq Analysis

```{r}
# Rewrite the variable with the results:
dds <- DESeq(dds)
```

## Extract the Results

We just need to declare a new `res` results variable:

```{r}
res <- results(dds)
head(res)
```

Let's remake a volcano plot with our new data:

```{r}
# To color the points:
mycols = rep("black", nrow(res))
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$log2FoldChange >= 2] <- "blue"
mycols[res$padj >= 0.05] <- "black"

# The plot:
plot(res$log2FoldChange, -log(res$padj), col=mycols)

# Finally, the boundaries of significant stats:
abline(v=2, col="red")
abline(v=-2, col="red")
abline(h=-log(0.05), col="red")
```

## Add Gene Annotations

We have to re-annotate the gene data so we have gene symbols, gene names, and ENTREZ IDs.

```{r}
# Translation to gene symbols:
res$symbol <- mapIds(x=org.Hs.eg.db,
                     keys=rownames(res),
                     keytype="ENSEMBL",
                     column="SYMBOL")

# Translation to gene names:
res$genename <- mapIds(x=org.Hs.eg.db,
                     keys=rownames(res),
                     keytype="ENSEMBL",
                     column="GENENAME")

# Translation to gene ENTREZ IDs:
res$entrezid <- mapIds(x=org.Hs.eg.db,
                     keys=rownames(res),
                     keytype="ENSEMBL",
                     column="ENTREZID")
```

## Saving Results to a CSV File:

```{r}
write.csv(res, file="class14data.csv")
```

## Result Visualization

```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrezid
head(foldchanges)

# And finally, let's run gage!
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)

# What pathways overlap with what we have annotated?
head(keggres$less)
```

## Pathway Analysis

```{r, message=FALSE}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

Once we have done that, we can take a look at our first pathway:

![Figure 1: The Cell Cycle Pathways.](hsa04110.pathview.png)
But, I want to see the remaining pathways as well, so we can do this with the following code:

```{r, message=FALSE}
# Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)

pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

And here are the generated KEGG pathway images:

![](hsa04060.pathview.png)
![](hsa04640.pathview.png)
![](hsa05146.pathview.png)
![](hsa05323.pathview.png)
![](hsa05332.pathview.png)

## Gene Ontology Subsets

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

## Reactome Analysis

We need to make a little file of our significant genes so that we can upload to the online reactome webpage:

```{r}
# Here are our significant genes:
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))

# And let's write the file:
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, 
            col.names=FALSE, quote=FALSE)
```

And here is a diagram of one of the pathways we found:

![Figure 1: The Mitotic Cell Cycle.](R-HSA-69278.svg)


